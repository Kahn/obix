<?xml version="1.0" encoding="UTF-8"?>
<!--
 	Copyright (c) 2013-2014 Qingtao Cao [harry.cao@nextdc.com]

	This file is part of obix-adaptors

	obix-adaptors is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	obix-adaptors is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with obix-adaptors.  If not, see <http://www.gnu.org/licenses/>.
-->
<config>
	<!--
		Configurations irrelevant to devices layout on modbus lines
		are collected under the <meta/> tag
	-->
	<meta>
		<!--
			IP address and TCP port of the MGATE box, which is a modbus master
			and converts "modbus TCP" requests received from Ethernet into
			"modbus RTU" and relays them onto modbus lines.

			The history_lobby is where the history facilities for all CBs
			represented by the current adaptor program are created under
			/obix/historyService/histories/. If needed, each BCM device
			could have its own history_lobby settings, or use the
			device_href of each BCM (see below) for the same purpose.
		-->
		<controller_address>
			<ip val="10.4.17.222"/>
			<port val="502"/>
			<history_lobby val="/M1/DH1/"/>
		</controller_address>

		<!--
			Parameters of the "mg_collector" worker thread, which periodically
			fetch hardware status via MGATE box. If the current libmodbus API
			timeout, the thread would pause for a while and retry. 

			Set period to 0 to achieve a 'real-time' behaviour.
		-->
		<mg_collector>
			<period val="0" unit="msec"/>
			<sleep val="1"/>
			<max_timeout val="3"/>
		</mg_collector>

		<!--
			Parameters of the "obix_updater" worker thread, which periodically
			update oBIX server with the latest hardware status and append one
			history record for each CB on every BCM connected to current MGATE box.

			Set period to 0 to achieve a 'real-time' behaviour.
		-->
		<obix_updater>
			<period val="0" unit="msec"/>
			<history_period val="300" unit="sec"/>
		</obix_updater>

		<!--
			Miscellaneous settings
		-->
		<misc>
			<!--
				The default number of CB devices on one panel of a BCM device
				Should not be changed regardless of any CB devices are skipped
				over at the beginning of each panel. If this is the case, set
				the cb_offset value properly
			-->
			<cb_per_panel val="42"/>

			<!--
				The number of CB devices skipped over at the beginning of each
				panel of a BCM device, which will offset the value in "cb_per_panel"
				and the starting address and length of various holding registers.
			-->
			<cb_offset val="0"/>

			<!--
				Default values if BCM/CB devices fail to provide a non-zero
				value, such as the line-to-neutral and line-to-line voltage,
				the default power factor and the latency between each modbus
				operation's timeout (in second)
			-->
			<volt_l2n_def val="230.0"/>
			<volt_l2l_def val="415.0"/>
			<pf_def val="0.9"/>
			<ac_freq_def val="50.0"/>
			<delay_per_reg val="1"/>

			<!--
				The timeout threshold for the CURL handle used by the oBIX updater
				thread on each modbus
			-->
			<curl_timeout val="30" unit="sec"/>
			<curl_bulky val="0"/>
		</misc>

		<!--
			The start address and counter for various holding registers on BCM,
			AUX and CB respectively. Please refer to "E30 SERIES MODBUS POINT MAP"
			document for details.

			Pay attention that in above document register number starts from 1,
			therefore the adapter program should decrease them by 1 before passing
			them to libmodbus APIs.

			modbus-cli tool can be used to access holding registers on specified
			modbus slave. e.g.,:

				modbus read -s <slave ID> <master IP> <addr> <count>

			Alternatively, src/test/modbus.c program can be used for similar
			purpose, please refer to its comment for more information
		-->
		<reg_table>
			<sn>
				<address val="1"/>
				<count val="2"/>
			</sn>

			<firmware>
				<address val="3"/>
				<count val="2"/>
			</firmware>

			<model>
				<address val="5"/>
				<count val="1"/>
			</model>

			<ct_config>
				<address val="6"/>
				<count val="1"/>
			</ct_config>

			<location>
				<address val="7"/>
				<count val="64"/>
			</location>

			<!-- VOLTAGE INPUTS -->
			<ac_freq>
				<address val="600"/>
				<count val="2"/>
			</ac_freq>

			<volt_l2n>
				<address val="602"/>
				<count val="2"/>
			</volt_l2n>

			<volt_l2l>
				<address val="604"/>
				<count val="2"/>
			</volt_l2l>

			<volt_a>
				<address val="606"/>
				<count val="2"/>
			</volt_a>

			<volt_b>
				<address val="608"/>
				<count val="2"/>
			</volt_b>

			<volt_c>
				<address val="610"/>
				<count val="2"/>
			</volt_c>

			<!-- AUX INPUTS -->
			<total_kwh>
				<address val="618"/>
				<count val="2"/>
			</total_kwh>

			<total_kw>
				<address val="620"/>
				<count val="2"/>
			</total_kw>

			<ac_avg>
				<address val="624"/>
				<count val="2"/>
			</ac_avg>

			<!--
				DATA for 42 single-phase meters

				!! IMPORTANT !!
				All these values should be left untouched as the default
				values when the "cb_offset" setting is 0. They will be
				offseted automatically when this setting is not 0 in the
				hope to spare the trouble of facility technicians to
				re-calculate them manually.
			-->
			<kwh>
				<address val="2000"/>
				<count val="84" />
			</kwh>

			<kw>
				<address val="2084"/>
				<count val="84"/>
			</kw>

			<!--
				Since the value of scale register is always -3, we can take
				advantage of this by reading from just one integer register
				instead of two float registers for each CB.
			-->
			<pf>
				<address val="1294"/>
				<count val="42"/>
			</pf>

			<I>
				<address val="2252"/>
				<count val="84" />
			</I>
		</reg_table>
	</meta>

	<!--
		The arrangement of various modbus lines on MGATE box, which
		accommodates 4 modbus lines and a couple of BCM can be serialized
		on each of them.

		Pay attention that the "Slave ID" specified for each BCM are
		virtual slave id used by libmodbus API and administrator needs to
		setup MGATE box properly to translate them into real slave id before
		relaying requests onto a modbus	line.

		Please use modbus-cli or modbus.c tool aforementioned to ensure BCMs
		with specified slave id are actually accessible through the MGATE
		box, and each obix:list contract should only contain objects of
		BCMs that are in fact on the same modbus line so as to take the
		most advantage of parallelism.

		Lastly, the device_href gives clue to where to register the relevant
		BCM and all its CB devices. It MUST be started and followed by a slash,
		for example, "/M1/DH1/A/",  which means "Melbourne, Data Hall 1,
		section A". There is no limitation on the depth of the href hierarchy,
		facility technicians are free to use more complicated hrefs.

		With the help of device_href, BCM devices controlled by one MGATE box
		do not necessarily have to be registered to the same parent href on the
		oBIX server.

		It is the FACILITY TECHNICIANS responsibility to setup values of the
		slave_id and device_href settings properly.
	-->
	<modbus>
		<list name="PORT1">
			<obj name="4A-1A">
				<int name="slave_id" val="1"/>
				<str name="device_href" val="/M1/DH1/A/"/>
			</obj>
			<obj name="4A-2A">
				<int name="slave_id" val="3"/>
				<str name="device_href" val="/M1/DH1/A/"/>
			</obj>
			<obj name="4G-3A">
				<int name="slave_id" val="5"/>
				<str name="device_href" val="/M1/DH1/A/"/>
			</obj>
		</list>
		<list name="PORT2">
			<obj name="4G-4A">
				<int name="slave_id" val="7"/>
				<str name="device_href" val="/M1/DH1/B/"/>
			</obj>
			<obj name="4C-5A">
				<int name="slave_id" val="9"/>
				<str name="device_href" val="/M1/DH1/B/"/>
			</obj>
			<obj name="4C-6A">
				<int name="slave_id" val="11"/>
				<str name="device_href" val="/M1/DH1/B/"/>
			</obj>
		</list>
		<list name="PORT3">
			<obj name="4J-7A">
				<int name="slave_id" val="13"/>
				<str name="device_href" val="/M1/DH1/C/"/>
			</obj>
			<obj name="4G-8A">
				<int name="slave_id" val="15"/>
				<str name="device_href" val="/M1/DH1/C/"/>
			</obj>
			<obj name="4H-9A">
				<int name="slave_id" val="17"/>
				<str name="device_href" val="/M1/DH1/C/"/>
			</obj>
		</list>
		<list name="PORT4">
    	 	<obj name="4I-10A">
				<int name="slave_id" val="19"/>
				<str name="device_href" val="/M1/DH1/D/"/>
			</obj>
			<obj name="4I-11A">
				<int name="slave_id" val="21"/>
				<str name="device_href" val="/M1/DH1/D/"/>
			</obj>
			<obj name="4I-12A">
				<int name="slave_id" val="23"/>
				<str name="device_href" val="/M1/DH1/D/"/>
			</obj>
		</list>
	</modbus>
</config>
