#!/usr/bin/env bash

##############################################################################
# Copyright (c) 2013-2014 Tyler Watson <tyler.watson@nextdc.com>
#
# This file is part of oBIX.
#
# oBIX is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# oBIX is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with oBIX.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

# Unit test: test_batch_invoke.test
#
# Tests the obix:Batch invoke mechanism by creating a test device contract, and
# invoking the /obix/signUp operation through the batch mechanism.
#
# Steps:
#
# 1) Create test device with a unique URI and sign it up to oBIX server
# 2) Create an obix:BatchIn contract with the two subnodes of the temporary
#	 device inserted as obix:Write batch-in items with temporary values
# 3) Test whether the device returned in the obix:BatchOut contract from the
#	 batch mechanism has values that match the input contract.
#
# At each step, output is validated.

source "$1/obix-client-functions.sh"

now=$(date +%s%N)
test_int_value=$[ 1 + $[ RANDOM % 999999999 ]]
test_int_value_2=$[ 1 + $[ RANDOM % 999999999 ]]
device_href="/obix/deviceRoot/TestDevice-$now"

read -r -d '' device_contract <<-EOF
<obj name="testDevice-$now" href="$device_href" is="obix:test-device">
	<bool href="testBool" val="false" writable="true"/>
	<int href="testInt" val="$test_int_value" writable="true"/>
	<int href="testReadOnly" val="$test_int_value_2"/>
</obj>
EOF

read -r -d '' batch_in_contract <<-EOF
<list name="hrefs" is="obix:BatchIn" of="obix:list obix:uri">
	<uri is="obix:Invoke" val="/obix/signUp">
		$device_contract
	</uri>
</list>
EOF

# Send batch 
OBIX_DOC=$(curl -XPOST --data "$batch_in_contract" "$OBIX_TEST_URL/batch")
obix_valid_root "$OBIX_DOC"; [ "$?" -gt 0 ] && exit 1
obix_is_err_contract "$OBIX_DOC"; [ "$?" -gt 0 ] && exit 1

batch_child_count=$($1/xpath "count(/list[@is='obix:BatchOut']/obj[@href='$device_href'])" -<<<"$OBIX_DOC")
[ "$batch_child_count" -eq 1 ] || exit 1

batch_bool_count=$($1/xpath "count(/list[@is='obix:BatchOut']/obj[@href='$device_href']/bool[@href='testBool' and @val='false'])" -<<<"$OBIX_DOC")
batch_int_count=$($1/xpath "count(/list[@is='obix:BatchOut']/obj[@href='$device_href']/int[@href='testInt' and @val='$test_int_value'])" -<<<"$OBIX_DOC")
batch_int_count_2=$($1/xpath "count(/list[@is='obix:BatchOut']/obj[@href='$device_href']/int[@href='testReadOnly' and @val='$test_int_value_2'])" -<<<"$OBIX_DOC")

[ "$batch_bool_count" -eq 1 ] || exit 1
[ "$batch_int_count" -eq 1 ] || exit 1
[ "$batch_int_count_2" -eq 1 ] || exit 1

exit 0
