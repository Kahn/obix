#!/usr/bin/env bash

##############################################################################
# Copyright (c) 2013-2014 Tyler Watson <tyler.watson@nextdc.com>
#
# This file is part of oBIX.
#
# oBIX is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# oBIX is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with oBIX.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

# Unit test: test_uri_write_invalid.test 
#
# Signs up a test device with a unique href, and then invokes a write to a read-
# only subnode on the device, and tests whether an err contract is returned by
# the server.
#
# Steps:
#
# 1) Sign up a test device by posting a sample device contract to /obix/signUp
# 2) Redownload the device at the same URI
# 3) Invoke an oBIX write to the device's /testReadOnly subnode
# 4) Tests for the presence of an err contract from the server
#
# At each step, output is validated.

source "$1/obix-client-functions.sh"

test_bool_value="false"
now=$(date +%s%N)
device_href="/obix/deviceRoot/TestDevice-$now"

# The same device contract
read -r -d '' device_contract <<-EOF
<obj name="testDevice-$now" href="$device_href" is="obix:test-device">
	<bool href="testBool" val="false" writable="true"/>
	<int href="testInt" val="0" writable="true"/>
	<int href="testReadOnly" val="0"/>
</obj>
EOF

#invoke signup
OBIX_DOC=$(curl -XPOST --data "$device_contract" "$OBIX_TEST_URL/signUp")

obix_valid_root "$OBIX_DOC"; [ "$?" -gt 0 ] && exit 1
obix_is_err_contract "$OBIX_DOC"; [ "$?" -gt 0 ] && exit 1

# Retrieve test device once again
OBIX_DOC=$(curl "$OBIX_TEST_URL/deviceRoot/TestDevice-$now")

obix_valid_root "$OBIX_DOC"; [ "$?" -gt 0 ] && exit 1
obix_is_err_contract "$OBIX_DOC"; [ "$?" -gt 0 ] && exit 1

device_root_count=$(xmllint --xpath 'count(/obj[@is="obix:test-device"])' -<<< "$OBIX_DOC")
[ "$device_root_count" -ne 1 ] && exit 1

#invoke an obix write to a read-only contract which should invoke an error
OBIX_DOC=$(curl -XPUT --data "<int val='1'/>" "$OBIX_TEST_URL/deviceRoot/TestDevice-$now/testReadOnly")

obix_valid_root "$OBIX_DOC"; [ "$?" -gt 0 ] && exit 1

#fail assert if the response is not an error contract
obix_is_err_contract "$OBIX_DOC"; [ "$?" -eq 1 ] || exit 1

exit 0
