#!/usr/bin/env bash

##############################################################################
# Copyright (c) 2013-2014 Tyler Watson <tyler.watson@nextdc.com>
#
# This file is part of oBIX.
#
# oBIX is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# oBIX is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with oBIX.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

# Unit test: test_watch_poll_short.test
#
# Tests the oBIX:Watch short polling mechanism by creating a test device, a 
# watch object, and invoking an oBIX write to a watched upon URI inside the
# test device and testing the result to /pollChanges on the created watch.
#
# Steps:
#
# 1) Create test device with a unique URI and sign it up to oBIX server
# 2) Create a watch object via /obix/watchService/make
# 3) Add a URI in the test device to the watch object
# 4) Test whether the URI provided in the input WatchIn contract matches
#	 the URI passed back in the WatchOut contract from the /add operation
#	 
#
# At each step, output is validated.


source "$1/obix-client-functions.sh"
now=$(date +%s%N)
device_href="/obix/deviceRoot/TestDevice-$now"

read -r -d '' device_contract <<-EOF
<obj name="testDevice-$now" href="$device_href" is="obix:test-device">
	<bool href="testBool" val="false" writable="true"/>
	<int href="testInt" val="0" writable="true"/>
	<int href="testReadOnly" val="0"/>
</obj>
EOF

# sign up device
OBIX_DOC=$(curl -XPOST --data "$device_contract" "$OBIX_TEST_URL/signUp")
obix_valid_root "$OBIX_DOC"; [ "$?" -gt 0 ] && exit 1
obix_is_err_contract "$OBIX_DOC"; [ "$?" -gt 0 ] && exit 1

read -r -d '' watch_in_contract <<-EOF
<obj is="obix:WatchIn">
	<list name="hrefs" is="obix:list obix:uri">
		<uri val="$device_href/testBool" />
	</list>
</obj>
EOF

# create watch object
OBIX_DOC=$(curl -XPOST --data "" "$OBIX_TEST_URL/watchService/make")

obix_valid_root "$OBIX_DOC"; [ "$?" -gt 0 ] && exit 1
obix_is_err_contract "$OBIX_DOC"; [ "$?" -gt 0 ] && exit 1

watch_href=$($1/xpath 'string(/obj[@href]/@href)' -<<< "$OBIX_DOC")

# Invoke watch add
OBIX_DOC=$(curl -XPOST --data "$watch_in_contract" "$OBIX_TEST_URL_BASE$watch_href""add")

obix_valid_root "$OBIX_DOC"; [ "$?" -gt 0 ] && exit 1
obix_is_err_contract "$OBIX_DOC"; [ "$?" -gt 0 ] && exit 1

# test whether the WatchOut contract features from the server, and it has a bool
# element that matches the bool href provided in the WatchIn contract above.
watch_out_count=$($1/xpath "count(/obj[@is='obix:WatchOut'])" -<<< "$OBIX_DOC")
[ "$watch_out_count" -eq 1 ] || exit 1

watch_href_count=$($1/xpath "count(/obj[@is='obix:WatchOut']/list/bool[@href='$device_href/testBool'])" -<<< "$OBIX_DOC")
[ "$watch_href_count" -eq 1 ] || exit 1

#invoke a write to a watched object
OBIX_DOC=$(curl -XPUT --data "<bool val='true'/>" "$OBIX_TEST_URL_BASE$device_href""/testBool")

obix_valid_root "$OBIX_DOC"; [ "$?" -gt 0 ] && exit 1
obix_is_err_contract "$OBIX_DOC"; [ "$?" -gt 0 ] && exit 1

#invoke a /pollChanges 
OBIX_DOC=$(curl -XPOST --data "" "$OBIX_TEST_URL_BASE$watch_href""pollChanges")

obix_valid_root "$OBIX_DOC"; [ "$?" -gt 0 ] && exit 1
obix_is_err_contract "$OBIX_DOC"; [ "$?" -gt 0 ] && exit 1

# test whether the WatchOut contract features from the server, and it has a bool
# element that matches the bool href provided in the WatchIn contract above.
watch_out_count=$($1/xpath "count(/obj[@is='obix:WatchOut'])" -<<< "$OBIX_DOC")
[ "$watch_out_count" -eq 1 ] || exit 1

watch_href_count=$($1/xpath "count(/obj[@is='obix:WatchOut']/list/bool[@href='$device_href/testBool' and @val='true'])" -<<< "$OBIX_DOC")
[ "$watch_href_count" -eq 1 ] || exit 1

exit 0
